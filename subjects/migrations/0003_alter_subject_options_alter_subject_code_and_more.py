# Generated by Django 5.0.2 on 2025-08-17 21:37

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('classes', '0002_initial'),
        ('school', '0001_initial'),
        ('students', '0001_initial'),
        ('subjects', '0002_initial'),
        ('teachers', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='subject',
            options={'ordering': ['name'], 'verbose_name': 'Matière', 'verbose_name_plural': 'Matières'},
        ),
        migrations.AlterField(
            model_name='subject',
            name='code',
            field=models.CharField(blank=True, help_text='Code court unique pour identifier la matière (ex: MATH, FR, HIST)', max_length=10, null=True, unique=True, verbose_name='Code de la matière'),
        ),
        migrations.AlterField(
            model_name='subject',
            name='description',
            field=models.TextField(blank=True, help_text='Description détaillée de la matière et de ses objectifs', null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='subject',
            name='group',
            field=models.PositiveIntegerField(choices=[(1, 'Groupe 1'), (2, 'Groupe 2')], default=1, help_text='Groupe de classification de la matière', verbose_name='Groupe'),
        ),
        migrations.AlterField(
            model_name='subject',
            name='name',
            field=models.CharField(help_text='Nom complet de la matière (ex: Mathématiques, Français, Histoire)', max_length=100, unique=True, verbose_name='Nom de la matière'),
        ),
        migrations.AlterField(
            model_name='subject',
            name='teachers',
            field=models.ManyToManyField(blank=True, help_text='Enseignants qualifiés pour cette matière', related_name='subjects', to='teachers.teacher', verbose_name='Enseignants'),
        ),
        migrations.AlterModelTable(
            name='subject',
            table='subjects_subject',
        ),
        migrations.CreateModel(
            name='LearningUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Titre descriptif de l'unité d'apprentissage", max_length=200, verbose_name="Titre de l'unité")),
                ('description', models.TextField(help_text="Description détaillée du contenu et des objectifs de l'unité", verbose_name='Description')),
                ('estimated_hours', models.PositiveIntegerField(help_text="Nombre d'heures estimées pour couvrir cette unité", verbose_name='Heures estimées')),
                ('order', models.PositiveIntegerField(help_text='Ordre de progression dans le programme (1 = première unité)', verbose_name='Ordre')),
                ('key_concepts', models.TextField(blank=True, help_text='Liste des concepts principaux abordés dans cette unité', verbose_name='Concepts clés')),
                ('skills_developed', models.TextField(blank=True, help_text='Compétences que les élèves développeront grâce à cette unité', verbose_name='Compétences développées')),
                ('learning_objectives', models.TextField(blank=True, help_text='Objectifs spécifiques à atteindre par les élèves', verbose_name="Objectifs d'apprentissage")),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cette unité est actuellement enseignée', verbose_name='Unité active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text="Unités d'apprentissage qui doivent être maîtrisées avant celle-ci", to='subjects.learningunit', verbose_name='Prérequis')),
            ],
            options={
                'verbose_name': "Unité d'apprentissage",
                'verbose_name_plural': "Unités d'apprentissage",
                'db_table': 'subjects_learning_unit',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Titre descriptif de la leçon', max_length=200, verbose_name='Titre de la leçon')),
                ('objectives', models.TextField(help_text="Objectifs d'apprentissage spécifiques pour cette leçon", verbose_name='Objectifs spécifiques')),
                ('activities', models.TextField(help_text='Description des activités et exercices prévus', verbose_name='Activités prévues')),
                ('materials_needed', models.TextField(blank=True, help_text='Liste du matériel et des ressources nécessaires', verbose_name='Matériel nécessaire')),
                ('planned_duration', models.PositiveIntegerField(default=60, help_text='Durée prévue de la leçon en minutes', verbose_name='Durée prévue (minutes)')),
                ('actual_duration', models.PositiveIntegerField(blank=True, help_text='Durée effective de la leçon en minutes', null=True, verbose_name='Durée effective (minutes)')),
                ('status', models.CharField(choices=[('PLANNED', 'Planifiée'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminée'), ('CANCELLED', 'Annulée'), ('POSTPONED', 'Reportée')], default='PLANNED', help_text='Statut actuel de la leçon', max_length=20, verbose_name='Statut')),
                ('completion_percentage', models.PositiveIntegerField(default=0, help_text='Pourcentage de réalisation de la leçon (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Pourcentage de réalisation')),
                ('notes', models.TextField(blank=True, help_text="Notes et commentaires de l'enseignant", verbose_name='Notes')),
                ('student_feedback', models.TextField(blank=True, help_text='Retour et commentaires des élèves sur la leçon', verbose_name='Retour des élèves')),
                ('planned_date', models.DateField(help_text='Date prévue pour cette leçon', verbose_name='Date prévue')),
                ('actual_date', models.DateField(blank=True, help_text='Date effective de réalisation de la leçon', null=True, verbose_name='Date effective')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('created_by', models.ForeignKey(blank=True, help_text='Enseignant ayant créé cette leçon', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_lessons', to='teachers.teacher', verbose_name='Créé par')),
                ('learning_unit', models.ForeignKey(help_text="Unité d'apprentissage à laquelle appartient cette leçon", on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='subjects.learningunit', verbose_name="Unité d'apprentissage")),
                ('teacher', models.ForeignKey(help_text='Enseignant responsable de cette leçon', on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='teachers.teacher', verbose_name='Enseignant')),
                ('timetable_slot', models.ForeignKey(help_text='Créneau horaire réservé pour cette leçon', on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='classes.timetableslot', verbose_name='Créneau horaire')),
            ],
            options={
                'verbose_name': 'Leçon',
                'verbose_name_plural': 'Leçons',
                'db_table': 'subjects_lesson',
                'ordering': ['planned_date', 'timetable_slot__period'],
                'unique_together': {('learning_unit', 'timetable_slot')},
            },
        ),
        migrations.CreateModel(
            name='SubjectProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Titre descriptif du programme pédagogique', max_length=200, verbose_name='Titre du programme')),
                ('description', models.TextField(help_text="Description détaillée des objectifs et de l'approche pédagogique", verbose_name='Description générale')),
                ('objectives', models.TextField(help_text='Liste des objectifs généraux à atteindre par les élèves', verbose_name="Objectifs d'apprentissage")),
                ('total_hours', models.PositiveIntegerField(help_text="Nombre total d'heures prévues pour ce programme", verbose_name='Heures totales')),
                ('difficulty_level', models.CharField(choices=[('BEGINNER', 'Débutant'), ('INTERMEDIATE', 'Intermédiaire'), ('ADVANCED', 'Avancé')], default='INTERMEDIATE', help_text='Niveau de difficulté du programme', max_length=20, verbose_name='Niveau de difficulté')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si ce programme est actuellement en cours d'utilisation", verbose_name='Programme actif')),
                ('is_approved', models.BooleanField(default=False, help_text='Indique si ce programme a été approuvé par la direction', verbose_name='Programme approuvé')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('created_by', models.ForeignKey(blank=True, help_text='Enseignant ayant créé ce programme', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_programs', to='teachers.teacher', verbose_name='Créé par')),
                ('school_class', models.ForeignKey(help_text='Classe cible pour ce programme', on_delete=django.db.models.deletion.CASCADE, related_name='subject_programs', to='classes.schoolclass', verbose_name='Classe')),
                ('school_year', models.ForeignKey(help_text="Année scolaire d'application du programme", on_delete=django.db.models.deletion.CASCADE, related_name='subject_programs', to='school.schoolyear', verbose_name='Année scolaire')),
                ('subject', models.ForeignKey(help_text='Matière concernée par ce programme', on_delete=django.db.models.deletion.CASCADE, related_name='programs', to='subjects.subject', verbose_name='Matière')),
            ],
            options={
                'verbose_name': 'Programme de matière',
                'verbose_name_plural': 'Programmes de matières',
                'db_table': 'subjects_subject_program',
                'ordering': ['subject__name', 'school_class__name', 'school_year__annee'],
                'unique_together': {('subject', 'school_class', 'school_year')},
            },
        ),
        migrations.AddField(
            model_name='learningunit',
            name='subject_program',
            field=models.ForeignKey(help_text='Programme pédagogique auquel appartient cette unité', on_delete=django.db.models.deletion.CASCADE, related_name='learning_units', to='subjects.subjectprogram', verbose_name='Programme parent'),
        ),
        migrations.CreateModel(
            name='LessonProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('understanding_level', models.PositiveIntegerField(choices=[(1, 'Niveau 1'), (2, 'Niveau 2'), (3, 'Niveau 3'), (4, 'Niveau 4'), (5, 'Niveau 5')], help_text="Niveau de compréhension de l'élève (1=Faible, 5=Excellent)", verbose_name='Niveau de compréhension')),
                ('participation', models.PositiveIntegerField(choices=[(1, 'Niveau 1'), (2, 'Niveau 2'), (3, 'Niveau 3'), (4, 'Niveau 4'), (5, 'Niveau 5')], help_text="Niveau de participation de l'élève (1=Faible, 5=Excellent)", verbose_name='Niveau de participation')),
                ('homework_completed', models.BooleanField(default=False, help_text="Indique si l'élève a réalisé les devoirs associés", verbose_name='Devoirs réalisés')),
                ('homework_quality', models.PositiveIntegerField(blank=True, choices=[(1, 'Niveau 1'), (2, 'Niveau 2'), (3, 'Niveau 3'), (4, 'Niveau 4'), (5, 'Niveau 5')], help_text='Qualité du travail réalisé (1=Faible, 5=Excellent)', null=True, verbose_name='Qualité des devoirs')),
                ('notes', models.TextField(blank=True, help_text="Notes générales sur la progression de l'élève", verbose_name='Notes')),
                ('teacher_feedback', models.TextField(blank=True, help_text="Retour et commentaires de l'enseignant pour cet élève", verbose_name="Retour de l'enseignant")),
                ('student_feedback', models.TextField(blank=True, help_text="Retour et commentaires de l'élève sur la leçon", verbose_name="Retour de l'élève")),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('evaluated_by', models.ForeignKey(blank=True, help_text='Enseignant ayant évalué cette progression', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evaluated_progress', to='teachers.teacher', verbose_name='Évalué par')),
                ('lesson', models.ForeignKey(help_text='Leçon concernée par ce suivi', on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='subjects.lesson', verbose_name='Leçon')),
                ('student', models.ForeignKey(help_text='Élève concerné par ce suivi', on_delete=django.db.models.deletion.CASCADE, related_name='lesson_progress', to='students.student', verbose_name='Élève')),
            ],
            options={
                'verbose_name': "Progression de l'élève",
                'verbose_name_plural': 'Progressions des élèves',
                'db_table': 'subjects_lesson_progress',
                'ordering': ['student__last_name', 'student__first_name'],
                'unique_together': {('lesson', 'student')},
            },
        ),
    ]
