#!/usr/bin/env python
"""
Script de test pour v√©rifier la coh√©rence des mod√®les
Ex√©cution: python manage.py shell < scripts/test_models.py
"""

import os
import sys
import django

# Ajouter le r√©pertoire parent au path Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'scolaris.settings')
django.setup()

from django.db import models
from school.models import School, SchoolYear, SchoolLevel, EducationSystem
from classes.models import SchoolClass
from students.models import Student
from subjects.models import Subject
from teachers.models import Teacher, TeachingAssignment

def test_models_consistency():
    """Teste la coh√©rence des mod√®les et leurs relations"""
    print("üîç Test de coh√©rence des mod√®les...")
    
    # Test 1: V√©rification des mod√®les de base
    print("\n1. V√©rification des mod√®les de base...")
    try:
        school = School.objects.first()
        year = SchoolYear.objects.first()
        system = EducationSystem.objects.first()
        
        if school:
            print(f"   ‚úÖ School trouv√©e: {school.name}")
        else:
            print("   ‚ö†Ô∏è Aucune School trouv√©e")
            
        if year:
            print(f"   ‚úÖ SchoolYear trouv√©e: {year.annee}")
        else:
            print("   ‚ö†Ô∏è Aucune SchoolYear trouv√©e")
            
        if system:
            print(f"   ‚úÖ EducationSystem trouv√©: {system.name}")
        else:
            print("   ‚ö†Ô∏è Aucun EducationSystem trouv√©")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des mod√®les de base: {e}")
    
    # Test 2: V√©rification des niveaux scolaires
    print("\n2. V√©rification des niveaux scolaires...")
    try:
        levels = SchoolLevel.objects.all()
        if levels.exists():
            print(f"   ‚úÖ {levels.count()} niveau(x) scolaire(s) trouv√©(s):")
            for level in levels:
                print(f"      - {level.name} (Syst√®me: {level.system.name})")
        else:
            print("   ‚ö†Ô∏è Aucun niveau scolaire trouv√©")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des niveaux: {e}")
    
    # Test 3: V√©rification des classes
    print("\n3. V√©rification des classes...")
    try:
        classes = SchoolClass.objects.all()
        if classes.exists():
            print(f"   ‚úÖ {classes.count()} classe(s) trouv√©e(s):")
            for cls in classes:
                level_info = f" (Niveau: {cls.level.name})" if cls.level else " (Niveau: Non d√©fini)"
                print(f"      - {cls.name}{level_info}")
        else:
            print("   ‚ö†Ô∏è Aucune classe trouv√©e")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des classes: {e}")
    
    # Test 4: V√©rification des mati√®res
    print("\n4. V√©rification des mati√®res...")
    try:
        subjects = Subject.objects.all()
        if subjects.exists():
            print(f"   ‚úÖ {subjects.count()} mati√®re(s) trouv√©e(s):")
            for subject in subjects:
                print(f"      - {subject.name} [{subject.code}] (Groupe {subject.group})")
        else:
            print("   ‚ö†Ô∏è Aucune mati√®re trouv√©e")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des mati√®res: {e}")
    
    # Test 5: V√©rification des enseignants
    print("\n5. V√©rification des enseignants...")
    try:
        teachers = Teacher.objects.all()
        if teachers.exists():
            print(f"   ‚úÖ {teachers.count()} enseignant(s) trouv√©(s):")
            for teacher in teachers:
                main_subj = f" ‚Üí {teacher.main_subject.code}" if teacher.main_subject else ""
                print(f"      - {teacher.last_name} {teacher.first_name} ({teacher.matricule}){main_subj}")
        else:
            print("   ‚ö†Ô∏è Aucun enseignant trouv√©")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des enseignants: {e}")
    
    # Test 6: V√©rification des affectations d'enseignement
    print("\n6. V√©rification des affectations d'enseignement...")
    try:
        assignments = TeachingAssignment.objects.all()
        if assignments.exists():
            print(f"   ‚úÖ {assignments.count()} affectation(s) trouv√©e(s):")
            for assignment in assignments:
                teacher_info = f" - {assignment.teacher}" if assignment.teacher else " - Non assign√©"
                print(f"      - {assignment.subject.code} ‚Üí {assignment.school_class.name}{teacher_info} (coef: {assignment.coefficient}, h: {assignment.hours_per_week})")
        else:
            print("   ‚ö†Ô∏è Aucune affectation d'enseignement trouv√©e")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des affectations: {e}")
    
    # Test 7: V√©rification des √©l√®ves
    print("\n7. V√©rification des √©l√®ves...")
    try:
        students = Student.objects.all()
        if students.exists():
            print(f"   ‚úÖ {students.count()} √©l√®ve(s) trouv√©(s):")
            for student in students:
                class_info = f" ‚Üí {student.current_class.name}" if student.current_class else " (Classe: Non assign√©e)"
                print(f"      - {student.last_name} {student.first_name} ({student.matricule}){class_info}")
        else:
            print("   ‚ö†Ô∏è Aucun √©l√®ve trouv√©")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des √©l√®ves: {e}")
    
    print("\nüéØ Test de coh√©rence termin√© !")

def test_model_fields():
    """Teste les champs des mod√®les pour v√©rifier leur coh√©rence"""
    print("\nüîç Test des champs des mod√®les...")
    
    # Test des champs du mod√®le Student
    print("\n1. Mod√®le Student:")
    try:
        student_fields = Student._meta.get_fields()
        required_fields = ['matricule', 'first_name', 'last_name', 'gender', 'birth_date', 'birth_place']
        for field_name in required_fields:
            field = Student._meta.get_field(field_name)
            if field.null and field.blank:
                print(f"   ‚úÖ {field_name}: nullable et blank")
            elif field.null:
                print(f"   ‚úÖ {field_name}: nullable")
            elif field.blank:
                print(f"   ‚úÖ {field_name}: blank")
            else:
                print(f"   ‚úÖ {field_name}: requis")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des champs Student: {e}")
    
    # Test des champs du mod√®le SchoolClass
    print("\n2. Mod√®le SchoolClass:")
    try:
        class_fields = SchoolClass._meta.get_fields()
        required_fields = ['name', 'level', 'year', 'school']
        for field_name in required_fields:
            field = SchoolClass._meta.get_field(field_name)
            if field.null and field.blank:
                print(f"   ‚úÖ {field_name}: nullable et blank")
            elif field.null:
                print(f"   ‚úÖ {field_name}: nullable")
            elif field.blank:
                print(f"   ‚úÖ {field_name}: blank")
            else:
                print(f"   ‚úÖ {field_name}: requis")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des champs SchoolClass: {e}")
    
    print("\nüéØ Test des champs termin√© !")

if __name__ == "__main__":
    print("üöÄ D√©but des tests de coh√©rence...")
    test_models_consistency()
    test_model_fields()
    print("\nüéâ Tous les tests sont termin√©s !")
