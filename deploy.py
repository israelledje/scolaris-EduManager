#!/usr/bin/env python3
"""
Script de d√©ploiement pour EduManager
G√®re la compilation CSS et la collecte des fichiers statiques
"""
import subprocess
import sys
import os
from pathlib import Path

def run_command(cmd, description):
    """Ex√©cute une commande et g√®re les erreurs"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur:")
        print(f"   Commande: {cmd}")
        print(f"   Code de sortie: {e.returncode}")
        if e.stdout:
            print(f"   Sortie: {e.stdout}")
        if e.stderr:
            print(f"   Erreur: {e.stderr}")
        return False

def check_files():
    """V√©rifie que les fichiers critiques existent"""
    files_to_check = [
        "package.json",
        "tailwind.config.js",
        "static/src/input.css"
    ]
    
    print("üîç V√©rification des fichiers...")
    for file_path in files_to_check:
        if not os.path.exists(file_path):
            print(f"‚ùå Fichier manquant: {file_path}")
            return False
        else:
            print(f"‚úÖ Trouv√©: {file_path}")
    return True

def deploy():
    """Process de d√©ploiement complet"""
    print("üöÄ D√©but du d√©ploiement EduManager")
    print("=" * 50)
    
    # 1. V√©rification des fichiers
    if not check_files():
        print("‚ùå V√©rification des fichiers √©chou√©e")
        return False
    
    # 2. Installation des d√©pendances npm
    if not run_command("npm install", "Installation des d√©pendances npm"):
        return False
    
    # 3. Compilation du CSS Tailwind
    if not run_command("npm run build:css", "Compilation du CSS Tailwind"):
        return False
    
    # 4. V√©rification du fichier CSS g√©n√©r√©
    css_path = "static/src/dist/styles.css"
    if os.path.exists(css_path):
        size = os.path.getsize(css_path) / 1024
        print(f"‚úÖ CSS g√©n√©r√©: {css_path} ({size:.1f} KB)")
    else:
        print(f"‚ùå CSS non g√©n√©r√©: {css_path}")
        return False
    
    # 5. Collecte des fichiers statiques Django
    if not run_command("python manage.py collectstatic --noinput", "Collecte des fichiers statiques"):
        return False
    
    # 6. V√©rification finale
    staticfiles_css = "staticfiles/src/dist/styles.css"
    if os.path.exists(staticfiles_css):
        size = os.path.getsize(staticfiles_css) / 1024
        print(f"‚úÖ CSS dans staticfiles: {staticfiles_css} ({size:.1f} KB)")
    else:
        print(f"‚ö†Ô∏è  CSS non trouv√© dans staticfiles: {staticfiles_css}")
    
    print("=" * 50)
    print("üéâ D√©ploiement termin√© avec succ√®s!")
    print("üìã R√©sum√©:")
    print("   ‚Ä¢ CSS Tailwind compil√©")
    print("   ‚Ä¢ Fichiers statiques collect√©s")
    print("   ‚Ä¢ Pr√™t pour la production")
    
    return True

def clean():
    """Nettoie les fichiers temporaires"""
    print("üßπ Nettoyage des fichiers temporaires...")
    
    paths_to_clean = [
        "staticfiles",
        "static/src/dist/styles.css",
        "node_modules"
    ]
    
    for path in paths_to_clean:
        if os.path.exists(path):
            import shutil
            if os.path.isdir(path):
                shutil.rmtree(path)
                print(f"üóëÔ∏è  Dossier supprim√©: {path}")
            else:
                os.remove(path)
                print(f"üóëÔ∏è  Fichier supprim√©: {path}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Script de d√©ploiement EduManager")
    parser.add_argument("--clean", action="store_true", help="Nettoyer avant d√©ploiement")
    parser.add_argument("--only-css", action="store_true", help="Compiler seulement le CSS")
    
    args = parser.parse_args()
    
    if args.clean:
        clean()
    
    if args.only_css:
        # Compilation CSS seulement
        success = (check_files() and 
                  run_command("npm install", "Installation npm") and
                  run_command("npm run build:css", "Compilation CSS"))
    else:
        # D√©ploiement complet
        success = deploy()
    
    sys.exit(0 if success else 1)
