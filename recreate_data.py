#!/usr/bin/env python
"""
Script pour recr√©er toutes les donn√©es dans PostgreSQL
Utilise les scripts existants du dossier scripts/
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'scolaris.settings')
django.setup()

from django.db import connections
from django.core.management import execute_from_command_line

def reset_postgresql():
    """Vide compl√®tement PostgreSQL"""
    print("üóëÔ∏è Vidage de PostgreSQL...")
    
    try:
        with connections['default'].cursor() as cursor:
            # Supprimer toutes les tables
            cursor.execute("""
                DO $$ DECLARE
                    r RECORD;
                BEGIN
                    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = current_schema()) LOOP
                        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
                    END LOOP;
                END $$;
            """)
        
        print("‚úÖ PostgreSQL vid√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du vidage : {e}")
        return False

def recreate_schema():
    """Recr√©e le sch√©ma PostgreSQL"""
    print("üìã Recr√©ation du sch√©ma PostgreSQL...")
    
    try:
        # Cr√©er les migrations
        execute_from_command_line(['manage.py', 'makemigrations'])
        
        # Appliquer les migrations
        execute_from_command_line(['manage.py', 'migrate'])
        
        print("‚úÖ Sch√©ma PostgreSQL recr√©√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du sch√©ma : {e}")
        return False

def create_initial_data():
    """Cr√©e les donn√©es initiales (√©cole, ann√©e scolaire, etc.)"""
    print("üè´ Cr√©ation des donn√©es initiales...")
    
    try:
        # Cr√©er une √©cole
        from school.models import School, SchoolYear
        
        school, created = School.objects.get_or_create(
            name="Lyc√©e Bilingue de Yaound√©",
            defaults={
                'address': 'Yaound√©, Cameroun',
                'phone': '+237 222 123 456',
                'email': 'contact@lby.cm'
            }
        )
        if created:
            print("‚úÖ √âcole cr√©√©e")
        else:
            print("‚ôªÔ∏è √âcole existante")
        
        # Cr√©er une ann√©e scolaire
        year, created = SchoolYear.objects.get_or_create(
            annee="2024-2025",
            defaults={
                'start_date': '2024-09-01',
                'end_date': '2025-06-30',
                'is_active': True
            }
        )
        if created:
            print("‚úÖ Ann√©e scolaire cr√©√©e")
        else:
            print("‚ôªÔ∏è Ann√©e scolaire existante")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es initiales : {e}")
        return False

def run_creation_scripts():
    """Ex√©cute les scripts de cr√©ation"""
    print("üìö Ex√©cution des scripts de cr√©ation...")
    
    try:
        # Script de cr√©ation des mati√®res
        print("üìñ Cr√©ation des mati√®res...")
        exec(open('scripts/creation_mati√®re.py').read())
        
        # Script de cr√©ation des √©l√®ves
        print("üë®‚Äçüéì Cr√©ation des √©l√®ves...")
        exec(open('scripts/crea_eleves.py').read())
        
        print("‚úÖ Scripts de cr√©ation ex√©cut√©s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution des scripts : {e}")
        return False

def verify_data():
    """V√©rifie que les donn√©es ont √©t√© cr√©√©es"""
    print("üîç V√©rification des donn√©es...")
    
    try:
        with connections['default'].cursor() as cursor:
            # Compter les enregistrements dans les principales tables
            tables = [
                ('classes_schoolclass', 'Classes'),
                ('students_student', '√âl√®ves'),
                ('subjects_subject', 'Mati√®res'),
                ('teachers_teacher', 'Enseignants'),
                ('authentication_user', 'Utilisateurs')
            ]
            
            for table, name in tables:
                try:
                    cursor.execute(f"SELECT COUNT(*) FROM {table}")
                    count = cursor.fetchone()[0]
                    print(f"üìä {name}: {count}")
                except Exception as e:
                    print(f"‚ùå Erreur pour {name}: {e}")
        
        print("‚úÖ V√©rification termin√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification : {e}")

def main():
    """Fonction principale"""
    print("=" * 70)
    print("üöÄ RECR√âATION COMPL√àTE DES DONN√âES - POSTGRESQL")
    print("=" * 70)
    
    try:
        # 1. Vider PostgreSQL
        if not reset_postgresql():
            return
        
        # 2. Recr√©er le sch√©ma
        if not recreate_schema():
            return
        
        # 3. Cr√©er les donn√©es initiales
        if not create_initial_data():
            return
        
        # 4. Ex√©cuter les scripts de cr√©ation
        if not run_creation_scripts():
            return
        
        # 5. V√©rification
        verify_data()
        
        print("\n" + "=" * 70)
        print("üéâ RECR√âATION R√âUSSIE !")
        print("=" * 70)
        print("üí° Toutes les donn√©es ont √©t√© recr√©√©es dans PostgreSQL")
        print("üí° Vous pouvez maintenant supprimer db.sqlite3")
        print("üí° Red√©marrez votre serveur Django")
        
    except Exception as e:
        print(f"\n‚ùå Erreur critique : {e}")
        print("La recr√©ation a √©chou√©. V√©rifiez les logs ci-dessus.")

if __name__ == '__main__':
    main()
