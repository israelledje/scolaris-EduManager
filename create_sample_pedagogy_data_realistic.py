#!/usr/bin/env python
"""
Script de cr√©ation de donn√©es d'exemple pour le syst√®me p√©dagogique SCOLARIS
G√©n√®re des programmes p√©dagogiques complets pour la classe 6e M1
AVEC DES HORAIRES R√âALISTES (36h/semaine maximum)
"""

import os
import sys
import django
from datetime import datetime, timedelta
import random

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'scolaris.settings')
django.setup()

from django.db.models import Q
from authentication.models import User
from subjects.models import Subject, SubjectProgram, LearningUnit, Lesson, LessonProgress
from classes.models import SchoolClass, TimetableSlot
from school.models import SchoolYear
from students.models import Student
from teachers.models import Teacher

def create_sample_data():
    """Cr√©e des donn√©es d'exemple pour le syst√®me p√©dagogique avec des horaires r√©alistes"""
    
    print("üéì Cr√©ation des donn√©es d'exemple pour le syst√®me p√©dagogique SCOLARIS")
    print("üìÖ AVEC DES HORAIRES R√âALISTES (36h/semaine maximum)")
    print("=" * 70)
    
    # R√©cup√©ration des donn√©es existantes
    try:
        # R√©cup√©rer la classe 6e M1
        school_class = SchoolClass.objects.get(name='6e M1')
        print(f"‚úÖ Classe trouv√©e: {school_class.name}")
        
        # R√©cup√©rer l'ann√©e scolaire actuelle
        current_year = SchoolYear.get_active_year()
        if not current_year:
            current_year = SchoolYear.objects.first()
        print(f"‚úÖ Ann√©e scolaire: {current_year}")
        
        # R√©cup√©rer les enseignants
        teachers = Teacher.objects.all()
        if not teachers.exists():
            print("‚ùå Aucun enseignant trouv√©. Cr√©ez d'abord des enseignants.")
            return
        print(f"‚úÖ {teachers.count()} enseignant(s) trouv√©(s)")
        
        # R√©cup√©rer les mati√®res existantes ou en cr√©er de nouvelles
        subjects_data = [
            {
                'name': 'Math√©matiques',
                'code': 'MATH',
                'description': 'Math√©matiques niveau 6e - Alg√®bre, g√©om√©trie, arithm√©tique'
            },
            {
                'name': 'Fran√ßais',
                'code': 'FRAN',
                'description': 'Fran√ßais niveau 6e - Grammaire, conjugaison, lecture, expression'
            },
            {
                'name': 'Histoire-G√©ographie',
                'code': 'HIST',
                'description': 'Histoire et g√©ographie niveau 6e - Antiquit√©, monde moderne'
            },
            {
                'name': 'Sciences et Technologie',
                'code': 'SCIE',
                'description': 'Sciences et technologie niveau 6e - SVT, physique, chimie'
            },
            {
                'name': 'Anglais',
                'code': 'ANGL',
                'description': 'Anglais niveau 6e - Communication, grammaire, vocabulaire'
            },
            {
                'name': 'Arts Plastiques',
                'code': 'ARTS',
                'description': 'Arts plastiques niveau 6e - Cr√©ativit√©, techniques, histoire de l\'art'
            },
            {
                'name': '√âducation Physique et Sportive',
                'code': 'EPS',
                'description': 'EPS niveau 6e - D√©veloppement physique, sports collectifs et individuels'
            },
            {
                'name': 'Technologie',
                'code': 'TECH',
                'description': 'Technologie niveau 6e - Conception, fabrication, informatique'
            }
        ]
        
        subjects = []
        for subject_data in subjects_data:
            # V√©rifier si la mati√®re existe d√©j√† par code ou par nom
            existing_subject = Subject.objects.filter(
                Q(code=subject_data['code']) | Q(name=subject_data['name'])
            ).first()
            
            if existing_subject:
                print(f"‚úÖ Mati√®re existante: {existing_subject.name}")
                subjects.append(existing_subject)
            else:
                try:
                    subject = Subject.objects.create(**subject_data)
                    print(f"‚úÖ Mati√®re cr√©√©e: {subject.name}")
                    subjects.append(subject)
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors de la cr√©ation de {subject_data['name']}: {e}")
                    # Essayer de r√©cup√©rer une mati√®re existante similaire
                    similar_subject = Subject.objects.filter(
                        name__icontains=subject_data['name'][:5]
                    ).first()
                    if similar_subject:
                        print(f"   ‚Üí Utilisation de la mati√®re similaire: {similar_subject.name}")
                        subjects.append(similar_subject)
                    else:
                        print(f"   ‚Üí Impossible de cr√©er ou r√©cup√©rer la mati√®re {subject_data['name']}")
                        continue
        
        # Utiliser un enseignant existant pour cr√©er les programmes
        admin_teacher = teachers.first()
        if admin_teacher:
            print(f"‚úÖ Enseignant s√©lectionn√© pour la cr√©ation: {admin_teacher.first_name} {admin_teacher.last_name}")
        else:
            print("‚ùå Aucun enseignant disponible pour cr√©er les programmes")
            return
        
        # PROGRAMMES P√âDAGOGIQUES AVEC HORAIRES R√âALISTES
        # Total: 36h/semaine (respect de la limite scolaire)
        programs_data = [
            {
                'subject': 'Math√©matiques',
                'title': 'Programme Math√©matiques 6e M1 - Fondamentaux',
                'description': 'Programme complet de math√©matiques pour la 6e M1 couvrant les bases essentielles',
                'objectives': '‚Ä¢ Ma√Ætriser les op√©rations de base\n‚Ä¢ Comprendre la g√©om√©trie plane\n‚Ä¢ R√©soudre des probl√®mes simples\n‚Ä¢ D√©velopper le raisonnement logique',
                'total_hours': 5,  # 5h/semaine (r√©aliste pour les maths)
                'difficulty_level': 'DEBUTANT',
                'units': [
                    {
                        'title': 'Les Nombres Entiers',
                        'description': 'Apprentissage des nombres entiers, op√©rations de base et r√©solution de probl√®mes',
                        'estimated_hours': 2,
                        'order': 1,
                        'key_concepts': 'Nombres entiers, addition, soustraction, multiplication, division',
                        'skills_developed': 'Calcul mental, r√©solution de probl√®mes, logique math√©matique',
                        'learning_objectives': '‚Ä¢ Comprendre la valeur des chiffres\n‚Ä¢ Ma√Ætriser les 4 op√©rations\n‚Ä¢ R√©soudre des probl√®mes simples',
                        'lessons': [
                            {
                                'title': 'Introduction aux nombres entiers',
                                'objectives': 'D√©couverte des nombres entiers, lecture et √©criture',
                                'activities': 'Exercices de lecture de nombres, jeux de cartes num√©riques',
                                'materials_needed': 'Cartes num√©riques, tableau, manuel',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            },
                            {
                                'title': 'L\'addition des nombres entiers',
                                'objectives': 'Techniques d\'addition, propri√©t√©s commutatives et associatives',
                                'activities': 'Exercices pratiques, probl√®mes concrets',
                                'materials_needed': 'Calculatrice, feuilles d\'exercices',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            }
                        ]
                    },
                    {
                        'title': 'La G√©om√©trie Plane',
                        'description': '√âtude des figures g√©om√©triques de base et de leurs propri√©t√©s',
                        'estimated_hours': 2,
                        'order': 2,
                        'key_concepts': 'Points, droites, segments, angles, polygones',
                        'skills_developed': 'Construction g√©om√©trique, mesure, observation',
                        'learning_objectives': '‚Ä¢ Reconna√Ætre les figures g√©om√©triques\n‚Ä¢ Construire des figures simples\n‚Ä¢ Mesurer des angles et segments',
                        'lessons': [
                            {
                                'title': 'Les figures de base',
                                'objectives': 'D√©couverte des points, droites et segments',
                                'activities': 'Construction au compas et √† la r√®gle, identification',
                                'materials_needed': 'Compas, r√®gle, crayon, feuilles',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            }
                        ]
                    }
                ]
            },
            {
                'subject': 'Fran√ßais',
                'title': 'Programme Fran√ßais 6e M1 - Communication et Expression',
                'description': 'Programme de fran√ßais ax√© sur la ma√Ætrise de la langue et l\'expression',
                'objectives': '‚Ä¢ Am√©liorer la lecture et la compr√©hension\n‚Ä¢ Ma√Ætriser la grammaire de base\n‚Ä¢ D√©velopper l\'expression √©crite et orale\n‚Ä¢ D√©couvrir la litt√©rature',
                'total_hours': 5,  # 5h/semaine (r√©aliste pour le fran√ßais)
                'difficulty_level': 'DEBUTANT',
                'units': [
                    {
                        'title': 'Grammaire et Conjugaison',
                        'description': 'Apprentissage des r√®gles grammaticales et des temps verbaux',
                        'estimated_hours': 3,
                        'order': 1,
                        'key_concepts': 'Classes grammaticales, conjugaison, accords',
                        'skills_developed': 'Analyse grammaticale, expression correcte',
                        'learning_objectives': '‚Ä¢ Identifier les classes de mots\n‚Ä¢ Conjuguer les verbes du 1er groupe\n‚Ä¢ Respecter les accords',
                        'lessons': [
                            {
                                'title': 'Les classes de mots',
                                'objectives': 'D√©couverte des noms, verbes, adjectifs et d√©terminants',
                                'activities': 'Exercices de classification, jeux de mots',
                                'materials_needed': 'Manuel, fiches d\'exercices, tableau',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            }
                        ]
                    }
                ]
            },
            {
                'subject': 'Histoire-G√©ographie',
                'title': 'Programme Histoire-G√©o 6e M1 - D√©couverte du Monde',
                'description': 'Programme d\'histoire et g√©ographie pour comprendre le monde',
                'objectives': '‚Ä¢ D√©couvrir l\'histoire ancienne\n‚Ä¢ Comprendre la g√©ographie du monde\n‚Ä¢ D√©velopper l\'esprit critique\n‚Ä¢ Acqu√©rir des rep√®res temporels et spatiaux',
                'total_hours': 4,  # 4h/semaine (r√©aliste pour l'histoire-g√©o)
                'difficulty_level': 'DEBUTANT',
                'units': [
                    {
                        'title': 'L\'Antiquit√©',
                        'description': '√âtude des civilisations anciennes et de leur h√©ritage',
                        'estimated_hours': 2,
                        'order': 1,
                        'key_concepts': 'Civilisations antiques, h√©ritage culturel, chronologie',
                        'skills_developed': 'Analyse historique, compr√©hension du temps',
                        'learning_objectives': '‚Ä¢ Conna√Ætre les grandes civilisations\n‚Ä¢ Comprendre l\'h√©ritage antique\n‚Ä¢ Se rep√©rer dans le temps',
                        'lessons': [
                            {
                                'title': 'Introduction √† l\'Antiquit√©',
                                'objectives': 'D√©finition de l\'Antiquit√©, chronologie g√©n√©rale',
                                'activities': 'Frise chronologique, lecture de documents',
                                'materials_needed': 'Frise chronologique, documents historiques',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            }
                        ]
                    }
                ]
            },
            {
                'subject': 'Sciences et Technologie',
                'title': 'Programme Sciences 6e M1 - D√©couverte Scientifique',
                'description': 'Programme de sciences pour √©veiller la curiosit√© scientifique',
                'objectives': '‚Ä¢ D√©couvrir le monde vivant\n‚Ä¢ Comprendre les ph√©nom√®nes naturels\n‚Ä¢ D√©velopper l\'esprit scientifique\n‚Ä¢ Pratiquer la d√©marche exp√©rimentale',
                'total_hours': 4,  # 4h/semaine (r√©aliste pour les sciences)
                'difficulty_level': 'DEBUTANT',
                'units': [
                    {
                        'title': 'Le Monde Vivant',
                        'description': 'D√©couverte de la diversit√© du monde vivant',
                        'estimated_hours': 2,
                        'order': 1,
                        'key_concepts': 'Biodiversit√©, classification, √©cosyst√®mes',
                        'skills_developed': 'Observation, classification, d√©marche scientifique',
                        'learning_objectives': '‚Ä¢ Observer la diversit√© du vivant\n‚Ä¢ Classer les √™tres vivants\n‚Ä¢ Comprendre les √©cosyst√®mes',
                        'lessons': [
                            {
                                'title': 'Qu\'est-ce que le vivant ?',
                                'objectives': 'Caract√©ristiques des √™tres vivants',
                                'activities': 'Observation d\'√©chantillons, exp√©riences',
                                'materials_needed': 'Microscopes, √©chantillons, loupes',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            }
                        ]
                    }
                ]
            },
            {
                'subject': 'Anglais',
                'title': 'Programme Anglais 6e M1 - Premiers Pas',
                'description': 'Programme d\'anglais pour d√©butants, communication de base',
                'objectives': '‚Ä¢ Acqu√©rir le vocabulaire de base\n‚Ä¢ Ma√Ætriser les structures simples\n‚Ä¢ Communiquer dans des situations quotidiennes\n‚Ä¢ D√©couvrir la culture anglophone',
                'total_hours': 3,  # 3h/semaine (r√©aliste pour l'anglais)
                'difficulty_level': 'DEBUTANT',
                'units': [
                    {
                        'title': 'Se Pr√©senter',
                        'description': 'Apprendre √† se pr√©senter et √† pr√©senter les autres',
                        'estimated_hours': 2,
                        'order': 1,
                        'key_concepts': 'Pronoms personnels, verbes √™tre et avoir, questions',
                        'skills_developed': 'Communication orale, compr√©hension, expression',
                        'learning_objectives': '‚Ä¢ Se pr√©senter en anglais\n‚Ä¢ Poser des questions simples\n‚Ä¢ Comprendre une pr√©sentation',
                        'lessons': [
                            {
                                'title': 'Hello, my name is...',
                                'objectives': 'Formules de pr√©sentation, pronoms personnels',
                                'activities': 'Dialogues, jeux de r√¥le, chansons',
                                'materials_needed': 'CD audio, images, flashcards',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            }
                        ]
                    }
                ]
            },
            {
                'subject': 'Arts Plastiques',
                'title': 'Programme Arts 6e M1 - Cr√©ativit√© et Expression',
                'description': 'Programme d\'arts plastiques pour d√©velopper la cr√©ativit√©',
                'objectives': '‚Ä¢ D√©velopper la cr√©ativit√© artistique\n‚Ä¢ D√©couvrir les techniques plastiques\n‚Ä¢ Comprendre l\'histoire de l\'art\n‚Ä¢ S\'exprimer par l\'art',
                'total_hours': 2,  # 2h/semaine (r√©aliste pour les arts)
                'difficulty_level': 'DEBUTANT',
                'units': [
                    {
                        'title': 'Les Couleurs et Formes',
                        'description': 'D√©couverte des couleurs primaires et des formes g√©om√©triques',
                        'estimated_hours': 2,
                        'order': 1,
                        'key_concepts': 'Couleurs primaires, formes g√©om√©triques, composition',
                        'skills_developed': 'Cr√©ativit√©, technique picturale, observation',
                        'learning_objectives': '‚Ä¢ Reconna√Ætre les couleurs primaires\n‚Ä¢ Cr√©er des compositions\n‚Ä¢ Utiliser diff√©rentes techniques',
                        'lessons': [
                            {
                                'title': 'D√©couverte des couleurs',
                                'objectives': 'Les couleurs primaires et secondaires, m√©langes',
                                'activities': 'M√©langes de couleurs, peinture, collage',
                                'materials_needed': 'Peintures, pinceaux, papiers, palettes',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            }
                        ]
                    }
                ]
            },
            {
                'subject': '√âducation Physique et Sportive',
                'title': 'Programme EPS 6e M1 - D√©veloppement Physique',
                'description': 'Programme d\'EPS pour le d√©veloppement physique et sportif',
                'objectives': '‚Ä¢ D√©velopper les capacit√©s physiques\n‚Ä¢ Pratiquer des sports collectifs\n‚Ä¢ Apprendre la coop√©ration\n‚Ä¢ Respecter les r√®gles',
                'total_hours': 4,  # 4h/semaine (r√©aliste pour l'EPS)
                'difficulty_level': 'DEBUTANT',
                'units': [
                    {
                        'title': 'Sports Collectifs',
                        'description': 'Apprentissage des sports collectifs de base',
                        'estimated_hours': 2,
                        'order': 1,
                        'key_concepts': 'Coop√©ration, r√®gles, fair-play',
                        'skills_developed': 'Coordination, esprit d\'√©quipe, motricit√©',
                        'learning_objectives': '‚Ä¢ Comprendre les r√®gles du jeu\n‚Ä¢ Coop√©rer avec les autres\n‚Ä¢ Respecter l\'adversaire',
                        'lessons': [
                            {
                                'title': 'Initiation au handball',
                                'objectives': 'R√®gles de base, passes et tirs',
                                'activities': 'Exercices techniques, matchs',
                                'materials_needed': 'Ballons, plots, filets',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            }
                        ]
                    }
                ]
            },
            {
                'subject': 'Technologie',
                'title': 'Programme Technologie 6e M1 - Innovation et Cr√©ation',
                'description': 'Programme de technologie pour d√©couvrir l\'innovation',
                'objectives': '‚Ä¢ D√©couvrir les objets techniques\n‚Ä¢ Comprendre la conception\n‚Ä¢ Utiliser l\'informatique\n‚Ä¢ Cr√©er des projets',
                'total_hours': 2,  # 2h/semaine (r√©aliste pour la technologie)
                'difficulty_level': 'DEBUTANT',
                'units': [
                    {
                        'title': 'Les Objets Techniques',
                        'description': 'D√©couverte et analyse d\'objets techniques',
                        'estimated_hours': 2,
                        'order': 1,
                        'key_concepts': 'Fonction, structure, mat√©riaux',
                        'skills_developed': 'Analyse technique, cr√©ativit√©, informatique',
                        'learning_objectives': '‚Ä¢ Analyser un objet technique\n‚Ä¢ Comprendre sa fonction\n‚Ä¢ Identifier ses composants',
                        'lessons': [
                            {
                                'title': 'Qu\'est-ce qu\'un objet technique ?',
                                'objectives': 'D√©finition et analyse d\'objets techniques',
                                'activities': 'Observation, dessin technique, informatique',
                                'materials_needed': 'Objets techniques, ordinateurs, logiciels',
                                'planned_duration': 55,
                                'status': 'PLANNED'
                            }
                        ]
                    }
                ]
            }
        ]
        
        # V√©rification du total des heures
        total_hours = sum(program['total_hours'] for program in programs_data)
        print(f"\nüìä V√âRIFICATION DES HORAIRES:")
        print(f"   ‚Ä¢ Total des heures demand√©es: {total_hours}h/semaine")
        print(f"   ‚Ä¢ Limite scolaire: 36h/semaine")
        
        if total_hours > 36:
            print(f"   ‚ö†Ô∏è  ATTENTION: Total d√©passant la limite de 36h/semaine")
            print(f"   ‚Ä¢ Les heures seront automatiquement ajust√©es lors de la g√©n√©ration de l'emploi du temps")
        elif total_hours < 36:
            print(f"   ‚ÑπÔ∏è  Total sous la limite: {36 - total_hours}h disponibles")
        else:
            print(f"   ‚úÖ Total parfait: exactement 36h/semaine")
        
        # Suppression des programmes existants pour cette classe et cette ann√©e
        print("\nüßπ Suppression des programmes existants...")
        existing_programs = SubjectProgram.objects.filter(
            school_class=school_class,
            school_year=current_year
        )
        if existing_programs.exists():
            count = existing_programs.count()
            existing_programs.delete()
            print(f"‚úÖ {count} programme(s) existant(s) supprim√©(s)")
        else:
            print("‚úÖ Aucun programme existant √† supprimer")
        
        # Suppression des cr√©neaux horaires existants pour cette classe et cette ann√©e
        print("üßπ Suppression des cr√©neaux horaires existants...")
        existing_slots = TimetableSlot.objects.filter(
            class_obj=school_class,
            year=current_year
        )
        if existing_slots.exists():
            count = existing_slots.count()
            existing_slots.delete()
            print(f"‚úÖ {count} cr√©neau(x) horaire(s) supprim√©(s)")
        else:
            print("‚úÖ Aucun cr√©neau horaire existant √† supprimer")
        
        # Cr√©ation des programmes p√©dagogiques
        created_programs = []
        
        for program_data in programs_data:
            # Trouver la mati√®re correspondante
            subject = next((s for s in subjects if s.name == program_data['subject']), None)
            if not subject:
                print(f"‚ùå Mati√®re non trouv√©e: {program_data['subject']}")
                continue
            
            # Cr√©er le programme
            program = SubjectProgram.objects.create(
                subject=subject,
                school_class=school_class,
                school_year=current_year,
                title=program_data['title'],
                description=program_data['description'],
                objectives=program_data['objectives'],
                total_hours=program_data['total_hours'],
                difficulty_level=program_data['difficulty_level'],
                is_active=True,
                is_approved=True,
                created_by=admin_teacher
            )
            print(f"‚úÖ Programme cr√©√©: {program.title} ({program.total_hours}h/semaine)")
            
            created_programs.append(program)
            
            # Cr√©er les unit√©s d'apprentissage
            for unit_data in program_data['units']:
                unit = LearningUnit.objects.create(
                    subject_program=program,
                    title=unit_data['title'],
                    description=unit_data['description'],
                    estimated_hours=unit_data['estimated_hours'],
                    order=unit_data['order'],
                    key_concepts=unit_data['key_concepts'],
                    skills_developed=unit_data['skills_developed'],
                    learning_objectives=unit_data['learning_objectives'],
                    is_active=True
                )
                print(f"  ‚úÖ Unit√© cr√©√©e: {unit.title} ({unit.estimated_hours}h)")
                
                # Cr√©er les le√ßons
                for lesson_data in unit_data['lessons']:
                    # Assigner un enseignant al√©atoirement
                    teacher = random.choice(teachers)
                    
                    # Cr√©er une date planifi√©e (dans les 2 prochaines semaines)
                    planned_date = datetime.now().date() + timedelta(days=random.randint(1, 14))
                    
                    lesson = Lesson.objects.create(
                        learning_unit=unit,
                        title=lesson_data['title'],
                        objectives=lesson_data['objectives'],
                        activities=lesson_data['activities'],
                        materials_needed=lesson_data['materials_needed'],
                        planned_date=planned_date,
                        planned_duration=lesson_data['planned_duration'],
                        teacher=teacher,
                        status=lesson_data['status']
                    )
                    print(f"    ‚úÖ Le√ßon cr√©√©e: {lesson.title} (Prof: {teacher.first_name} {teacher.last_name})")
        
        print("\n" + "=" * 70)
        print("üéâ CR√âATION TERMIN√âE AVEC SUCC√àS!")
        print(f"üìä R√©sum√©:")
        print(f"   ‚Ä¢ {len(created_programs)} programmes p√©dagogiques cr√©√©s")
        print(f"   ‚Ä¢ {LearningUnit.objects.filter(subject_program__in=created_programs).count()} unit√©s d'apprentissage")
        print(f"   ‚Ä¢ {Lesson.objects.filter(learning_unit__subject_program__in=created_programs).count()} le√ßons")
        print(f"   ‚Ä¢ Total des heures: {total_hours}h/semaine")
        print(f"   ‚Ä¢ Classe: {school_class.name}")
        print(f"   ‚Ä¢ Ann√©e: {current_year}")
        print("\nüöÄ Vous pouvez maintenant:")
        print(f"   ‚Ä¢ Acc√©der au tableau de bord: http://127.0.0.1:8000/subjects/pedagogy/")
        print(f"   ‚Ä¢ Voir les programmes dans l'admin: http://127.0.0.1:8000/admin/")
        print(f"   ‚Ä¢ Consulter l'onglet p√©dagogique de la classe: http://127.0.0.1:8000/classes/classes/{school_class.id}/")
        print(f"   ‚Ä¢ G√©n√©rer automatiquement l'emploi du temps dans l'onglet 'Emploi du temps'")
        
    except SchoolClass.DoesNotExist:
        print("‚ùå Classe '6e M1' non trouv√©e. Cr√©ez d'abord cette classe.")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        import traceback
        traceback.print_exc()

def cleanup_sample_data():
    """Supprime les donn√©es d'exemple cr√©√©es"""
    print("üßπ Nettoyage des donn√©es d'exemple...")
    
    try:
        # Supprimer les programmes cr√©√©s par notre script
        programs_to_delete = SubjectProgram.objects.filter(
            created_by__isnull=False
        )
        count = programs_to_delete.count()
        programs_to_delete.delete()
        print(f"‚úÖ {count} programmes supprim√©s")
        
        print("‚úÖ Nettoyage termin√©")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '--cleanup':
        cleanup_sample_data()
    else:
        create_sample_data()
